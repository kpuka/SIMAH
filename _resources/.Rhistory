b <- .1
sd_out <- 1
sd_pred <- 1
alpha <- 0.05
power <- 0.80
corr <- .3
attrition <- 0
n <- round(((((qnorm(1-alpha/2) + qnorm(power))^2)*sd_out)/(((b*sd_pred)^2)*(1-(corr^2))))/(1-attrition),0)
n
library(rsconnect)
library(rsconnect)
rsconnect::setAccountInfo(name='kpuka',
token='985719FFB33EDAD24E20A0B66F860747',
secret='5CyuQ8K5RTFLpb10p6xPDOm7fW+b4fLt0VVxWtQm')
# server.R
library(shiny)
library(ggplot2)
function(input, output) {
dataset <- reactive({
diamonds[sample(nrow(diamonds), input$sampleSize),]
})
output$plot <- renderPlot({
p <- ggplot(dataset(), aes_string(x=input$x, y=input$y)) + geom_point()
if (input$color != 'None')
p <- p + aes_string(color=input$color)
facets <- paste(input$facet_row, '~', input$facet_col)
if (facets != '. ~ .')
p <- p + facet_grid(facets)
if (input$jitter)
p <- p + geom_jitter()
if (input$smooth)
p <- p + geom_smooth()
print(p)
}, height=700)
}
# ui.R
library(shiny)
library(ggplot2)
dataset <- diamonds
fluidPage(
titlePanel("Diamonds Explorer"),
sidebarPanel(
sliderInput('sampleSize', 'Sample Size', min=1, max=nrow(dataset),
value=min(1000, nrow(dataset)), step=500, round=0),
selectInput('x', 'X', names(dataset)),
selectInput('y', 'Y', names(dataset), names(dataset)[[2]]),
selectInput('color', 'Color', c('None', names(dataset))),
checkboxInput('jitter', 'Jitter'),
checkboxInput('smooth', 'Smooth'),
selectInput('facet_row', 'Facet Row', c(None='.', names(dataset))),
selectInput('facet_col', 'Facet Column', c(None='.', names(dataset)))
),
mainPanel(
plotOutput('plot')
)
)
library(shiny)
runApp()
# ui.R
library(shiny)
library(ggplot2)
dataset <- diamonds
fluidPage(
titlePanel("Diamonds Explorer"),
sidebarPanel(
sliderInput('sampleSize', 'Sample Size', min=1, max=nrow(dataset),
value=min(1000, nrow(dataset)), step=500, round=0),
selectInput('x', 'X', names(dataset)),
selectInput('y', 'Y', names(dataset), names(dataset)[[2]]),
selectInput('color', 'Color', c('None', names(dataset))),
checkboxInput('jitter', 'Jitter'),
checkboxInput('smooth', 'Smooth'),
selectInput('facet_row', 'Facet Row', c(None='.', names(dataset))),
selectInput('facet_col', 'Facet Column', c(None='.', names(dataset)))
),
mainPanel(
plotOutput('plot')
)
)
library(shiny)
runApp()
setwd("C:/Users/klajd/OneDrive/Documents/Work/GitHub Website/_portfolio")
runApp()
setwd("C:/Users/klajd/OneDrive/Documents/Work/GitHub Website/_portfolio/")
runApp()
library(shiny); source('ui.R.R')
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
# Define UI
?numericInput
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
selectInput("dist", "Distribution",
choices = c("normal", "uniform", "exponential")
),
numericInput("n", "Number of samples", value = 100),
parameter_tabs,
),
mainPanel(
plotOutput("hist")
)
)
)
# Load R packages
library(shiny)
library(shinythemes)
runApp('C:/Users/klajd/Desktop')
runApp('C:/Users/klajd/Desktop')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('C:/Users/klajd/Desktop')
runApp('C:/Users/klajd/Desktop')
runApp('C:/Users/klajd/Desktop')
runApp('C:/Users/klajd/Desktop')
runApp('C:/Users/klajd/Desktop')
runApp('C:/Users/klajd/Desktop')
runApp('C:/Users/klajd/Desktop')
runApp('C:/Users/klajd/Desktop')
ui <- fluidPage(theme = shinytheme("lumen"),
navbarPage(
# theme = "cerulean",
"kpuka.ca",
tabPanel("Logistic Regression",
sidebarPanel(
numericInput("OR", "Smallest Clinically Meaningful Odds Ratio", value=NULL, min=0,step=0.1),
numericInput("prob_out", "Marginal Probability of Outcome", value=NULL, min=0.01, max=0.99, step=0.01),
numericInput("sd_pred", "Standard Deviation of the Predictor", value=NULL, min=0, max=NA, step=0.1),
numericInput("corr", "Multiple Correlation", value=0, min=0, max=1.0, step=0.01),
numericInput("alpha", "False Positive Rate", value=0.05, min=0, max=1.0, step=0.01),
numericInput("power", "Statistical Power", value=0.80, min=0, max=1.0, step=0.01),
numericInput("attrition", "Anticipated Attrition Rate", value=0, min=0, max=1.0, step=0.01),
), # end of sidebarPanel
mainPanel(
h2("Sample Size"),
textOutput("n_logistic"),
), # end of mainPanel
), # end of Tab
) #end navbarPage
) # end of fluid page
runApp('C:/Users/klajd/Desktop')
runApp('C:/Users/klajd/Desktop')
runApp('C:/Users/klajd/Desktop')
runApp('C:/Users/klajd/Desktop')
runApp()
runApp('C:/Users/klajd/Desktop')
runApp('C:/Users/klajd/OneDrive/Documents/Work/GitHub Website/_portfolio')
runApp()
runApp()
runApp()
HR <- 2
sd_pred <- 0.50
prob_out2 <-0.6
alpha <- 0.05
power <- 0.80
corr <- 0
attrition <- 0.0
round((((qnorm(1-alpha/2) + qnorm(power))^2) / ((((log(HR))*sd_pred)^2)*(prob_out2*(1-prob_out2))*(1-corr)))/(1-attrition),0)
round((((qnorm(1-alpha/2) + qnorm(power))^2) / ((((log(HR))*sd_pred)^2)*(prob_out2)*(1-corr)))/(1-attrition),0)
runApp()
freq <-0.5
sqrt(freq*(1 - freq))
freq < -0.5
sqrt(freq*(1 - freq))
freq < -0.4
sqrt(freq*(1 - freq))
freq <- 0.4
sqrt(freq*(1 - freq))
runApp()
runApp()
runApp()
# Load R packages
library(shiny)
library(shinythemes)
runApp()
runApp()
runApp()
runApp()
runApp()
trace()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
